# -*- cg-pre-pipe: "./modes/glegram-dev6-cg.mode" -*-
# Divvun & Giellatekno - open source grammars for Sámi and other languages
# Copyright © 2000-2025 UiT The Arctic University of Norway
# http://giellatekno.uit.no & http://divvun.no
#
# This program is free software; you can redistribute and/or modify
# this file under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version. The GNU General Public License
# is found at http://www.gnu.org/licenses/gpl.html. It is
# also available in the file $GTHOME/LICENSE.txt.
#
# Other licensing options are available upon request, please contact
# giellatekno@uit.no or divvun@uit.no

# ==================================================================== #
#!!       IRISH  G R A M M A R   C H E C K E R
# ==================================================================== #
# ====================================================================

#  Sámi language technology 2000-2025, UiT The Arctic University of Norway #

# ---------------------- #
#   Development setup:   #
# ---------------------- #
#
# cd $GTHOME/langs/??? # replace ??? with your language code
# ./autogen.sh
# ./configure --enable-apertium --with-hfst --enable-syntax --enable-grammarchecker --enable-tokenisers --enable-alignment --enable-reversed-intersect
# make
# cd tools/grammarcheckers
# make dev
#
# ---------------------- #
#   Then edit/test as:   #
# ---------------------- #
#
# emacs grammarchecker.cg3  # and C-c C-i / C-c C-c if you have cg-mode installed
# echo "Bhí dúchan na mbóithre de dhaoine ann" | tools/grammarcheckers/modes/trace-glegram.mode | less

#
# ---------------------- #
#   Other debug-pipes:   #
# ---------------------- #
#
# ls modes/
#
# ---------------------- #


      # =========================================== #
      #      Short table of contents                #
      # =========================================== #

      # Delimiters
      # Tags and sets
      # Grammar checking rules

# =============== #
#!! # DELIMITERS
# =============== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" sent ; #!!= * @CODE@

# ================== #
#!! # TAGS AND SETS
# ================== #

SETS


#!! ## Tags


#!! This section lists all the tags inherited from the fst, and used as tags
#!! in the syntactic analysis. The next section, **Sets**, contains sets defined
#!! on the basis of the tags listed here, those set names are not visible in the output.



# Tags declared as single-membered LISTs
# ======================================

#!! ### Beginning and end of sentence
LIST BOS = (>>>) (<s>) ;  #!! BOS
LIST EOS = (<<<) (</s>) ; #!! EOS

# We define end of clause and beginning of clause in a way so that the file
# may be read both by the CG-2 and the vislcg formalisms.
# CG3 doesn´t function without >>> and <<< !


#!! ### Parts of speech tags


LIST Art = Art ; #!! Art
LIST Noun = Noun ; #!! Noun
LIST Prep = Prep ; #!! Prep

LIST Subst = Subst ; #!! Subst Check what it is

LIST N = N ;		    #!! N CHECK!!
LIST A = A ;		    #!! A CHECK!!
LIST Noun = Noun ;	    #!! Noun
LIST Adj = Adj ;	    #!! Adjective
LIST Adv = Adv ;	    #!! Adv
LIST V = V ;		    #!! V
LIST Pron = Pron ;	    #!! Pron
LIST CS = CS ;		    #!! CS
LIST CC = CC ;		    #!! CC
SET CC-CS = CC OR CS ;  #!! CC-CS
LIST Po = Po ;		    #!! Po
LIST Pr = Pr ;		    #!! Pr
LIST Pcle = Pcle ;	    #!! Pcle
LIST Num = Num ;	    #!! Num
LIST Interj = Interj ;  #!! Interj
LIST ABBR = ABBR ;	    #!! ABBR
LIST ACR = ACR ;	    #!! ACR
LIST CLB = CLB ;	    #!! CLB
LIST LEFT = LEFT ;	    #!! LEFT
LIST RIGHT = RIGHT ;    #!! RIGHT
LIST WEB = WEB ;	    #!! WEB
LIST QMARK = """ ; # "  #!! QMARK
LIST PPUNCT = PUNCT ;   #!! PPUNCT
LIST Det = Det ; #!! Det
SET PUNCT = PPUNCT - QMARK ;  #!! PUNCT

LIST COMMA = "," ;  #!! COMMA
LIST ¶ = ¶;   #!! ¶



#!! ### Tags for POS sub-categories

LIST Simp = Simp ; #!! Simp
LIST Sbj = Sbj ; #!! Sbj

LIST Pers = Pers ;	    #!! Pers
LIST Dem = Dem ;	    #!! Dem
LIST Interr = Interr ;  #!! Interr
LIST Indef = Indef ;    #!! Indef
LIST Recipr = Recipr ;  #!! Recipr
LIST Refl = Refl ;	    #!! Refl
LIST Rel = Rel ;	    #!! Rel
LIST Coll = Coll ;	    #!! Coll
LIST NomAg = NomAg ;    #!! NomAg
LIST Prop = Prop ;	    #!! Prop
LIST Allegro = Allegro ; #!! Allegro
LIST Arab = Arab ; #!! Arab
LIST Rom = Rom ; #!! Romertall


#!! ### Tags for morphosyntactic properties

LIST DefArt = DefArt ; #!! DefArt
LIST Art = Art ; #!! Art
LIST Def = Def ; #!! Def
LIST Fem = Fem ; #!! Fem
LIST Masc = Masc ; #!! Masc
LIST Len = Len ; #!! Len
LIST hPref = hPref ; #!! hPref, for h prefixation
LIST Ecl = Ecl ; #!! Ecl
LIST Poss = Poss ; #!! Poss, possessive
LIST 1P = 1P ;
LIST 2P = 2P ;
LIST 3P = 3P ;

LIST Nom = Nom ; #!! Nom
LIST Acc = Acc ; #!! Acc
LIST Gen = Gen ; #!! Gen
LIST Dat = Dat ; #!! Dat
LIST Loc = Loc ; #!! Loc
LIST Com = Com ; #!! Com
LIST Ess = Ess ; #!! Ess
LIST Par = Par ; #!! Par
LIST Voc = Voc ; #!! Voc
LIST Sg = Sg ;   #!! Sg
LIST Pl = Pl ;   #!! Pl
LIST Cmp/SplitR = Cmp/SplitR ;	   #!! Cmp/SplitR
LIST Cmp/SgNom = Cmp/SgNom ; #!! Cmp/SgNom Cmp/SgGen
LIST Cmp/SgGen = Cmp/SgGen ; #!! Cmp/SgGen

LIST Comp = Comp ;		   #!! Comp
LIST Superl = Superl ;	   #!! Superl
LIST Attr = Attr ;		   #!! Attr
LIST Ord = Ord ;		   #!! Ord
LIST Qst = Qst ;		   #!! Qst
LIST IV = IV ; #!! IV
LIST TV = TV ; #!! TV
LIST VD = VD ; #!! VD
LIST VTI = VTI ; #!!
LIST Verbal = Verbal ; #!! Verbal
LIST Prt = Prt;				   #!! Prt
LIST Prs = Prs ;			   #!! Prs
LIST Ind = Ind ;			   #!! Ind
LIST Pot = Pot ;			   #!! Pot
LIST Cond = Cond ;			   #!! Cond
LIST Imprt = Imprt ;		   #!! Imprt
LIST ImprtII = ImprtII ;	   #!! ImprtII
LIST Sg1 = Sg1 (p1 sg) ;			   #!! Sg1
LIST Sg2 = Sg2 (p2 sg) ;			   #!! Sg2
LIST Sg3 = Sg3 (p3 sg) ;			   #!! Sg3
LIST Du1 = Du1 (p1 du) ;			   #!! Du1
LIST Du2 = Du2 (p2 du) ;			   #!! Du2
LIST Du3 = Du3 (p3 du) ;			   #!! Du3
LIST Pl1 = Pl1 (p1 pl) ;			   #!! Pl1
LIST Pl2 = Pl2 (p2 pl);			   #!! Pl2
LIST Pl3 = Pl3 (p3 pl);			   #!! Pl3
LIST Inf = Inf ;			   #!! Inf
LIST ConNeg = ConNeg ;		   #!! ConNeg
LIST Neg = Neg ;			   #!! Neg
LIST PrfPrc = PrfPrc ;		   #!! PrfPrc
LIST VGen = VGen ;			   #!! VGen
LIST PrsPrc = PrsPrc ;		   #!! PrsPrc
LIST Ger = Ger ;			   #!! Ger
LIST Sup = Sup ;			   #!! Sup
LIST Actio = Actio ;		   #!! Actio
LIST VAbess = VAbess ;		   #!! VAbess

SET NUMBER = Sg OR Pl ;  #!!= * @CODE@

LIST Err/Orth = Err/Orth Err/Orth-a/á Err/Orth-nom/gen Err/Orth-nom/acc Err/DerSub Err/CmpSub Err/UnspaceCmp Err/HyphSub Err/SpaceCmp Err/Spellrelax err_orth_mt ; #!! Err/Orth

#!! ### Semantic tags

LIST Sem/Act = Sem/Act ;				#!! Sem/Act
LIST Sem/Ani = Sem/Ani ;				#!! Sem/Ani
LIST Sem/Atr = Sem/Atr ;				#!! Sem/Atr
LIST Sem/Body = Sem/Body ;				#!! Sem/Body
LIST Sem/Clth = Sem/Clth ;				#!! Sem/Clth
LIST Sem/Domain = Sem/Domain ;			    	#!! Sem/Domain
LIST Sem/Feat-phys = Sem/Feat-phys ;	    		#!! Sem/Feat-phys
LIST Sem/Fem = Sem/Fem ;				#!! Sem/Fem
LIST Sem/Group = Sem/Group ;			    	#!! Sem/Group
LIST Sem/Lang = Sem/Lang ;				#!! Sem/Lang
LIST Sem/Mal = Sem/Mal ;				#!! Sem/Mal
LIST Sem/Measr = Sem/Measr ;			   	#!! Sem/Measr
LIST Sem/Money = Sem/Money ;			    	#!! Sem/Money
LIST Sem/Obj = Sem/Obj ;				#!! Sem/Obj
LIST Sem/Obj-el = Sem/Obj-el ;			    	#!! Sem/Obj-el
LIST Sem/Org = Sem/Org ;				#!! Sem/Org
LIST Sem/Perc-emo = Sem/Perc-emo ;		    	#!! Sem/Perc-emo
LIST Sem/Plc = Sem/Plc ;				#!! Sem/Plc
LIST Sem/Sign = Sem/Sign ;				#!! Sem/Sign
LIST Sem/State-sick = Sem/State-lang-sick ; 		#!! Sem/State-sick
LIST Sem/Sur = Sem/Sur ;				#!! Sem/Sur
LIST Sem/Time = Sem/Time ;				#!! Sem/Time
LIST Sem/Txt = Sem/Txt ;				#!! Sem/Txt

LIST HUMAN = Sem/Fem Sem/Mal Sem/Sur ;	    		#!! HUMAN

SET HAB-ACTOR = HUMAN ; #!! HAB-ACTOR
SET HAB-ACTOR-NOT-HUMAN = Sem/Org ; 			#!! HAB-ACTOR-NOT-HUMAN


LIST PROP-ATTR = Sem/Mal Sem/Sur Sem/Fem ; 		#!! PROP-ATTR
LIST PROP-SUR = Sem/Sur Sem/Mal Sem/Fem ; 		#!! PROP-SUR

SET TIME-N-SET = N + Sem/Time ;  			#!! TIME-N-SET

#!! ## Noun errors (Len vs. not Len) after prepositions

#!! The following prepositions cause the following noun to be eclipsed and there are different rules for each preposition.
LIST ECLIPSE-PREP = "<ar>" "<i>" "<chuig>" "<le>"; 			#!!= * @CODE@
#  "<ó>" "<roimh>" "<faoi> "<de>" "<do>" "<trí>" "<um>"


#!! These prepositions always cause the nouns after them to be lenited:
LIST ART-LEN-PREP = "<de>" "<do>" "<faoi>" "<mar>" "<ó>" "<roimh>" "<trí>";					#!!= * @CODE@

# Prepositions that do not lenite nouns: "<ag>" "<i>" "<le>" "<as>" "<chuig>" "<thar>" "<um>"


#LIST PREP-LEN = "<ar>" "<de>" "<do>" "<faoi>" "<gan>" "<idir>" "<ó>" "<roimh>" "<thar>" "<trí>" "<um>" ;  	#!!= * @CODE@
#LIST-PREP = "ag" "ar" "as" "chuig" "de" "do" "faoi" "i" "le" "ó" "roimh" "thar" "trí" "um";

#!! Noun errors (Ecl vs. not Ecl) after prepositions

LIST NUM-LEN = "aon" "<chéad>" "<dhá>" "trí" "<ceithre>" "cúig" "sé" "beirt" "uile"; 		#!!= * @CODE@
LIST NUM-ECL = "seacht" "ocht" "naoi" "deich" ; #!!= * @CODE@
LIST NUM-PL-ADJ = "<dhá>" "trí" "ceithre" "cúig" "sé" "seacht" "ocht" "naoi" "deich" "beirt" ; 	#!!= * @CODE@
LIST ECL-NON-ECL-N = (".*ó"r) (".*án"r) ; #!!= * @CODE@

LIST COMMONWORD = ("carr" Noun Masc) ("athair" Noun Masc) ; 	#!!= * @CODE@
LIST RAREWORD = ("carr" Noun Fem) ("athair" Noun Fem) ; 	#!!= * @CODE@

#!! ###  Syntactic tags

LIST @+FAUXV = @+FAUXV ;	         #!! `@+FAUXV     `
LIST @+FMAINV = @+FMAINV ;	         #!! `@+FMAINV    `
LIST @-FAUXV = @-FAUXV ;	         #!! `@-FAUXV     `
LIST @-FMAINV = @-FMAINV ;	         #!! `@-FMAINV    `
LIST @-FSUBJ> = @-FSUBJ> ;	         #!! `@-FSUBJ>    `
LIST @-F<OBJ = @-F<OBJ ;	         #!! `@-F<OBJ     `
LIST @-FOBJ> = @-FOBJ> ;	         #!! `@-FOBJ>     `
LIST @SPRED<OBJ = @SPRED<OBJ ;       	 #!! `@-FSPRED<OBJ`
LIST @-F<ADVL = @-F<ADVL ;	         #!! `@-F<ADVL    `
LIST @-FADVL> = @-FADVL> ;	         #!! `@-FADVL>    `
LIST @-F<SPRED = @-F<SPRED ;         	 #!! `@-F<SPRED   `
LIST @-F<OPRED = @-F<OPRED ;         	 #!! `@-F<OPRED   `
LIST @-FSPRED> = @-FSPRED> ;         	 #!! `@-FSPRED>   `
LIST @-FOPRED> = @-FOPRED> ;         	 #!! `@-FOPRED>   `
SET FOBJ = @-F<OBJ OR @-FOBJ> ;
SET FMAINV = @-FMAINV OR @+FMAINV ;
SET FAUXV = @-FAUXV OR @+FAUXV ;
LIST @>ADVL = @>ADVL ;               	#!! `@>ADVL`
LIST @ADVL< = @ADVL< ;               	#!! `@ADVL<`
LIST @<ADVL = @<ADVL ;               	#!! `@<ADVL`
LIST @ADVL> = @ADVL> ;               	#!! `@ADVL>`
LIST ADVL = @ADVL @ADVL> @ADVL< @<ADVL @>ADVL @-F<ADVL @-FADVL> ;  #!! `@ADVL`
LIST @HAB> = @HAB> ;                    #!! `@HAB>`
LIST @<HAB = @<HAB ;                    #!! `@<HAB`
SET @HAB = @<HAB OR @HAB> ;
LIST @>N = @>N ;		      	#!! `@>N`
LIST @Interj = @Interj ;      		#!! `@Interj  `
LIST @N< = @N< ;		      	#!! `@N<      `
LIST @>A = @>A ;		      	#!! `@>A      `
LIST @P< = @P< ;		      	#!! `@P<      `
LIST @>P = @>P ;		      	#!! `@>P      `
LIST @HNOUN = @HNOUN ;	      		#!! `@HNOUN   `
LIST @INTERJ = @INTERJ ;      		#!! `@INTERJ  `
LIST @>Num = @>Num;		      	#!! `@>Num    `
LIST @Pron< = @Pron< ;	      		#!! `@Pron<   `
LIST @>Pron = @>Pron ;	      		#!! `@>Pron   `
LIST @Num< = @Num< ;	      		#!! `@Num<    `
LIST @OBJ = @OBJ ;			#!! `@OBJ     `
LIST @<OBJ = @<OBJ ;		  	#!! `@<OBJ    `
LIST @OBJ> = @OBJ> ;		  	#!! `@OBJ>    `
LIST @OPRED = @OPRED ;		  	#!! `@OPRED   `
LIST @<OPRED = @<OPRED ;	  	#!! `@<OPRED  `
LIST @OPRED> = @OPRED> ;	  	#!! `@OPRED>  `
LIST @PCLE = @PCLE ;		  	#!! `@PCLE    `
LIST @COMP-CS< = @COMP-CS< ;  		#!! `@COMP-CS<`
LIST @SPRED = @SPRED ;		  	#!! `@SPRED   `
LIST @<SPRED = @<SPRED ;	  	#!! `@<SPRED  `
LIST @SPRED> = @SPRED> ;	  	#!! `@SPRED>  `
LIST @SUBJ = @SUBJ ;		  	#!! `@SUBJ    `
LIST @<SUBJ = @<SUBJ ;		  	#!! `@<SUBJ   `
LIST @SUBJ> = @SUBJ> ;		  	#!! `@SUBJ>   `
SET SUBJ = @<SUBJ OR @SUBJ> OR @SUBJ ; 	#!! SUBJ
SET SPRED = @<SPRED OR @SPRED> OR @SPRED ; #!! SPRED
SET OPRED = @<OPRED OR @OPRED> OR @OPRED ; #!! OPRED
LIST @PPRED = @PPRED ;        #!! @PPRED
LIST @APP = @APP ;			   #!! `@APP      `
LIST @APP-N< = @APP-N< ;	   	#!! `@APP-N<   `
LIST @APP-Pron< = @APP-Pron< ; 		#!! `@APP-Pron<`
LIST @APP>Pron = @APP>Pron ;   		#!! `@APP>Pron `
LIST @APP-Num< = @APP-Num< ;   		#!! `@APP-Num< `
LIST @APP-ADVL< = @APP-ADVL< ; 		#!! `@APP-ADVL<`
LIST @VOC = @VOC ;			#!! `@VOC      `
LIST @CVP = @CVP ;			#!! `@CVP      `
LIST @CNP = @CNP ;			#!! `@CNP      `
SET OBJ = (@<OBJ) OR (@OBJ>) OR (@OBJ) OR (@-F<OBJ) OR (@-FOBJ>) ; #!! OBJ
LIST <OBJ = @-F<OBJ @<OBJ ;    		#!! `<OBJ`
LIST OBJ> = @OBJ> @-FOBJ> ;    		#!! `OBJ>`
SET <OBJ-OTHERS = <OBJ OR (Gen) OR (Nom) OR (Ess) OR (Loc) OR (Adv) ; #!! `<OBJ-OTHERS`
SET OBJ>-OTHERS = OBJ> OR (Gen) OR (Nom) OR (Ess) OR (Loc) OR (Adv) ; #!! `OBJ>-OTHERS`
SET NOT-FAUXV = FMAINV OR OBJ + V OR ADVL + V ;

# Works after the mapping rules for verbs.
SET SYN-V = FMAINV OR FAUXV OR V + SUBJ OR OBJ + V OR ADVL + V OR (V @>N) OR (V @N<) OR (V @A<) ; #!! SYN-V
LIST @X = @X ;    #!! @X

# ========
  SETS
# ========


#!! ## Sets containing sets of lists and tags

#!! This part of the file lists a large number of sets based partly upon the tags defined above, and
#!! partly upon lexemes drawn from the lexicon.
#!! See the sourcefile itself to inspect the sets, what follows here is an overview of the set types.

#!! ### Sets for Single-word sets

LIST INITIAL = "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m"  	#!!= * @CODE@
        "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z"           	#!!= * @CODE@
        "á" ;  #!!= * @CODE@INITIAL

#!! ### Sets for word or not

LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ; #!! WORD
 #!! any word
# SET REAL-WORD = WORD - Num - Ord ; #!! REAL-WORD
SET REAL-WORD-NOT-ABBR = WORD - Num - Ord - (ABBR N) ; # This is former REALWORD-NOTABBR #!! REAL-WORD-NOT-ABBR #!!= * @CODE@
SET NOT-COMMA = WORD - COMMA ;  #!! NOT-COMMA #!!= * @CODE@


#!! ### Case sets
# ---------

LIST ADVLCASE = Dat Com ; #!! ADLVCASE

LIST CASE-AGREEMENT = Nom Acc Gen Dat Com ; 	#!! CASE-AGREEMENT
LIST CASE = Nom Acc Gen Dat Com Voc ; 		#!! CASE

SET NOT-NOM = CASE - Nom ; #!! NOT-NOM
SET NOT-GEN = CASE - Gen ; #!! NOT-GEN
SET NOT-ACC = CASE - Acc ; #!! NOT-ACC

#!! ### Verb sets
# ---------

#!! #### Verbs and their complements
# - - - - - - - - - - - - - -

SET NOT-V = WORD - V ; #!! NOT-V

#!! ### Sets for finiteness and mood
# - - - - - - - - - -

SET REAL-NEG = Neg - Sup ; #!! REAL-NEG

SET MOOD-V = Ind OR Pot OR Imprt OR ImprtII OR Cond OR (Neg Sup) ; #!! MOOD-V

SET NOT-PRFPRC = WORD - PrfPrc ; #!! NOT-PRFPRC


#!! ### Sets for person
# - - - -

LIST SG1-V = (V Sg1)  ;  #!! SG1-V
LIST SG2-V = (V Sg2)  ;  #!! SG2-V
LIST SG3-V = (V Sg3)  ;  #!! SG3-V
LIST PL1-V = (V Pl1)  ;  #!! PL1-V
LIST PL2-V = (V Pl2)  ;  #!! PL2-V
LIST PL3-V = (V Pl3)  ;  #!! PL3-V

LIST MODOA = (Poss 1P Sg) (Poss 2P Sg) (Poss 3P Sg Masc) ; 	#!! Set for your, my and his



LIST PLPOSS = (Poss Pl)  ;  #!!= * @CODE@

#!! Note that imperative verbs are not included in these sets!

#!! Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
SET SG-V = SG1-V OR SG2-V OR SG3-V ;  #!!= * @CODE@
SET PL-V = PL1-V OR PL2-V OR PL3-V ; #!!= * @CODE@


#!! ### Pronoun sets
# ------------

LIST PPRON-GEN = (Sg1 Gen) (Sg2 Gen) (Sg3 Gen) 
	(Pl1 Gen) (Pl2 Gen) (Pl3 Gen) (p1 sg gen) (p2 sg gen)
	(p1 pl gen) (p2 pl gen) (p3 pl gen) ;

SET PPRON-NOT-GEN = (Pron Pers) - PPRON-GEN ;

LIST SG-PRON = (Pron Sg1) (Pron Sg2) (Pron Sg3) (Pron Sg) (pron p1 sg) (pron p2 sg) (pron p3 sg);
LIST PL-PRON = (Pron Pl1) (Pron Pl2) (Pron Pl3) (Pron Pl) (pron p1 pl) (pron p2 pl) (pron p3 pl);


#!! ### Adjectival sets and their complements
# -------------------------------------
SET A-CASE = Adj - Attr - Adv ;

LIST A-CC = A CC ;

SET NOT-A = WORD - Adj ; # This is former NOT-ADJ
SET NOT-A-COMMA = WORD - Adj - COMMA ;
SET NOT-Attr = WORD - Attr ;
SET NOT-A-PCLE = WORD - Adj - Pcle ;
SET NOT-A-CC = WORD - A-CC ;


#!! ### Adverbial sets and their complements
# ------------------------------------
SET LEX-ADV = Adv - (AA) ;

SET NOT-ADV-DE         = WORD - Adv ;
SET NOT-ADV            = NOT-ADV-DE OR CLB ;
SET NOT-ADV-N          = NOT-ADV - N;
SET NOT-ADV-PCLE       = NOT-ADV - Pcle ;
SET NOT-ADV-INDEF      = NOT-ADV - Indef ;
SET NOT-ADV-PCLE-ILL-LOC-COM = WORD - Adv - Pcle - Loc - Com;
SET NOT-A-ADV-PCLE = WORD - Pcle - A - Adv ;



#!! ### Sets of elements with common syntactic behaviour
# ================================================

SETS

#!! ### NP sets defined according to their morphosyntactic features
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

LIST N-SG-NOM = (N Sg Nom);

LIST PROP = (N Prop);

SET COMMON-N = N - Prop;

SET HEAD-N = N - Cmp/SplitR ;

SET HEAD-N-NOM = (N Nom) - Cmp/SplitR ;

# SET SUBJECTHEAD = N OR A OR Pron - Refl ; # These, can be subject heads

SET NP = N OR A ;                      # anything that can take except numerals
SET NP-HEAD        = Pron OR HEAD-N ;
SET NP-HEAD-SG     = SG-PRON OR (N Sg) OR (A Sg) - Cmp/SplitR  ;
SET NP-HEAD-PL     = PL-PRON OR (N Pl) OR (A Pl) - Cmp/SplitR  ;
SET NP-HEAD-SG-NOM = SG-PRON + Nom OR (N Sg Nom) OR (A Sg Nom) - Cmp/SplitR ;
SET NP-HEAD-PL-NOM = PL-PRON + Nom OR (N Pl Nom) OR (N Coll Nom) OR (A Pl Nom) - Cmp/SplitR ;
SET NP-HEAD-NOM    = NP-HEAD-SG-NOM OR NP-HEAD-PL-NOM ;
SET NP-HEAD-ACC    = (Pron Acc) OR (N Acc) OR (A Acc) - Cmp/SplitR - (Dem Attr);
SET NP-HEAD-GEN    = (Pron Gen) OR (N Gen) OR (A Gen) - Cmp/SplitR - (Dem Attr)   ;

#!! ### The PRE-NP-HEAD family of sets

#!! These sets model noun phrases (NPs). The idea is to first define whatever can
#!! occur in front of the head of the NP, and thereafter negate that with the
#!! expression **WORD - premodifiers**.


SET PRE-NP-HEAD = (Prop Attr) OR (Prop @>N) OR (A Attr) OR (ABBR Attr)
         OR (Pron Pers Gen) OR (N Gen) OR
         Num OR Cmp/SplitR OR CC OR (Pron Dem) OR (Pron Refl Gen) OR (Indef Attr) OR
         (PrfPrc @>N) OR PrsPrc OR (A Ord) ;
         # The strict version of items that can only be premodifiers, not parts of the predicate

SET PRE-A-N     = (Pron Pers Gen) OR (Pron Pers Acc) OR (Pron Indef) OR Num OR (A Ord) OR (Pron Dem) OR (Pron Refl Gen) OR (Pron Refl Acc) ;

SET NOT-PRE-A-N = WORD - PRE-A-N ;

LIST PUNCT-LEFT = (PUNCT LEFT) ;
LIST PUNCT-RIGHT = (PUNCT RIGHT) ;

SET NOT-NPMOD     = WORD - PRE-NP-HEAD OR ABBR OR @CVP ;
# This is the previous NPNH (npnh) set.
# NOT-NPMOD  = "NOT-PRE-NP-HEAD"

SET NOT-NPMOD-ACC     = NOT-NPMOD - Acc OR ABBR ;
SET NOT-NPMOD-ACC-ADV     = NOT-NPMOD - Acc - Adv OR ABBR ;

SET NOT-NPMODADV    = WORD - PRE-NP-HEAD - Adv ;
SET NOT-NPMODADV-INDEF   = WORD - PRE-NP-HEAD - Adv - Indef ;

SET NOT-N = WORD - N ;
SET NOT-ART = WORD - Art ; 
SET NOT-N-A = WORD - N - A ;

SET NOT-NP = Inf OR Pcle OR Interj OR CS ;

SET NUM = Num ;

SET NOT-NUM = WORD - Num ;

SET NOT-CC = WORD - CC ;

SET NOT-PCLE = WORD - Pcle ;

SET REAL-CLB = CLB - COMMA ;


#!! ### Border sets and their complements
# ---------------------------------

SET CP = (Pron Interr) OR (Pron Rel) ;

LIST BOUNDARYSYMBOLS =  "\;" ":" "-" "–" ;

SET S-BOUNDARY = BOUNDARYSYMBOLS OR (@CVP) ;

SET BOC = S-BOUNDARY OR BOS ;
SET BOC-PUNCT = BOC - ("-") - ("–") ;
SET EOC = S-BOUNDARY OR EOS ;

SET NP-BOUNDARY = BOS OR EOS OR REAL-CLB OR Inf OR VGen OR Sup OR PPRON-NOT-GEN OR Recipr OR Po OR Pr OR Pcle OR Interj OR CS OR CP OR @CVP ;

SET SV-BOUNDARY = S-BOUNDARY OR Inf OR Sup OR FMAINV ;

SET CCCOMMA = CC OR COMMA ;
	# remember that those are potential sentence boundaries, too

#!! ### Morphoponological sets


LIST WORD-BEGIN-NO-LEN = ("<[dntls].*>"r) ;

LIST WORD-END-NO-LEN = ("<.*[dntls]>"r) ;


#!! ### Grammarchecker sets

#!! #### Genitive rules

#!! 1. N N => N N.Gen (When two nouns come together, the second noun has to be in the genitive case.)
LIST &msyn-gen-noun-noun =  &msyn-gen-noun-noun ;

#!! 2. N DefArt N => N DefArt N.Gen (When two nouns come together and there is the definite article between the nouns.)
LIST &msyn-gen-noun-defart-noun = &msyn-gen-noun-defart-noun ;

#!! 3. N DetPoss N => N DetPoss N.Gen (When two nouns come together and there is a possessive adjective between the nouns, the possessive adjective does not cancel the rule of the second noun being in the genitive case.)
LIST &msyn-gen-noun-detposs-noun = &msyn-gen-noun-detposs-noun ;

#!! 4. N A => N A.Gen When adjectives come after nouns, the adjective must be rendered into the genitive case as well.)
LIST &msyn-gen-noun-adj = &msyn-gen-noun-adj ;

#!! 5. VN N.Gen => VN N.Gen (When a definite noun follows a verbal noun, the definite noun has to be in the genitive case.)
LIST &msyn-gen-vn-noun = &msyn-gen-vn-noun ;

#!! Other gen tags:
LIST &msyn-gen-case-noun = &msyn-gen-case-noun ;   #!!= * @CODE@ is the old genrule tag we want to get rid of


#!! ###  Other tags

LIST SUGGEST = SUGGEST ;  #!!= * @CODE@ tag ensuring generation of a suggestion for an errouneous word
LIST ADDED = ADDED ;  #!!= * @CODE@ tag ensuring ... hmm
LIST &lex-tá-is = &lex-tá-is ;      #!!= * @CODE@ 
LIST &msyn-lenition-after-possessive-adjective = &msyn-lenition-after-possessive-adjective ;      #!!= * @CODE@ 
LIST &msyn-adj-gender = &msyn-adj-gender ;      #!!= * @CODE@ 
LIST &msyn-ar-a-haon-a-chlog = &msyn-ar-a-haon-a-chlog ; #!!= * @CODE@ 
LIST &msyn-ar-an-aonach = &msyn-ar-an-aonach ; #!!= * @CODE@ 
LIST &msyn-beag-is-fiú-de = &msyn-beag-is-fiú-de ; #!!= * @CODE@ 
LIST &msyn-cúpla-plnoun-sgnoun = &msyn-cúpla-plnoun-sgnoun ;     #!!= * @CODE@ 
LIST &msyn-ecl-after-prep = &msyn-ecl-after-prep ;     #!!= * @CODE@ 
LIST &msyn-fada-ó = &msyn-fada-ó ;    #!!= * @CODE@ 
# LIST &msyn-i-rith-nom-gen = &msyn-i-rith-nom-gen ;   not in use
LIST &msyn-ie.i. = &msyn-&.i. ;    #!!= * @CODE@ 
LIST &msyn-inis-de = &msyn-inis-de ;    #!!= * @CODE@ 
LIST &msyn-inis-do = &msyn-inis-do ;    #!!= * @CODE@ 
LIST &GEmsyn-len-after-prep = &msyn-len-after-prep ;    #!!= * @CODE@ 
LIST &msyn-len-after-prep-sfem = &msyn-len-after-prep-sfem ;    #!!= * @CODE@ 
LIST &msyn-noun-defart = &msyn-noun-defart ;    #!!= * @CODE@ 
LIST &msyn-possadj-nom-gen = &msyn-possadj-nom-gen ;    #!!= * @CODE@ 
LIST &msyn-prep-pron = &msyn-prep-pron ;    #!!= * @CODE@ 
LIST &msyn-teastaigh-ó = &msyn-teastaigh-ó ;    #!!= * @CODE@ 
LIST &msyn-ar-an-tae = &msyn-ar-an-tae;    #!!= * @CODE@ 
LIST &msyn-ar-an-gcaife = &msyn-ar-an-gcaife;    #!!= * @CODE@ 
LIST &msyn-tóin-poill = &msyn-tóin-poill ;    #!!= * @CODE@ 
LIST &msyn-fem-article = &msyn-fem-article ;    #!!= * @CODE@ 
LIST &spell-conservatively = spell-conservatively ;    #!!= * @CODE@ 
LIST &spell-it-all = spell-it-all ;    #!!= * @CODE@ 
LIST &syn-a-before-verb-relativephrase = &syn-a-before-verb-relativephrase ;    #!!= * @CODE@ 
LIST &use-ellipsis = &use-ellipsis ;    #!!= * @CODE@ 
LIST &use-guillemets = &use-guillemets ;    #!!= * @CODE@ 
LIST &msyn-lenition-after-ni = &msyn-lenition-after-ni ;
LIST &msyn-lenition-after-nior = &msyn-lenition-after-nior ;
LIST &msyn-com-case-nouns = &msyn-com-case-nouns ;
LIST SUGGEST = SUGGEST ;    #!!= * @CODE@ 

MAPPING-PREFIX = & ;    #!!= * @CODE@ 

#!! Here ends the list and set section

BEFORE-SECTIONS      #!!= # @CODE@ 

LIST <fixedcase> = <fixedcase>;       #!!= * @CODE@ 
ADD:fixedcase-np <fixedcase> TARGET Prop ;     	#!!= * @CODE@ ,  Never change case of proper nouns

SECTION      #!!= # @CODE@ 

#!! ## spellchecking

ADD:spell-it-all (&typo SUGGESTWF) (<spelled>) ;      		#!!= * @CODE@ = add rule marking typos

#!!! ## Copula errors tá vs. is

LIST HUMAN-N = "dochtúir" "múinteoir" "bean" "fear" ;    	#!!= * @CODE@ (to be moved to other tags)

#!! * **RULE: lex-tá-is ** To change *TÁ* to *IS*

ADD:lex-tá-is (&lex-tá-is) TARGET ("bí" Verb VI PresInd) IF (1 (Pron Pers 1P Sg) LINK 1 HUMAN-N) ;
COPY:lex-tá-is ("is" Cop Pres SUGGEST) EXCEPT ("bí" Verb VI PresInd ) TARGET (&lex-tá-is);

	## Tá mé bean tuirseach.
	#$ Is bean thuirseach mé.
	## Tá mé dochtúir. 
	#$ Is dochtúir mé.
	## Tá mé múinteoir.
	#$ Is múinteoir mé.
	## Tá mé fear.
	#$ Is fear mé.
	
#!! ## Gender errors in adjectives

#!! **RULE: msyn-adj-gender** to change Masculine adjective to Feminine if it modifies a feminine noun !!IT WORKS!!

ADD:msyn-adj-gender (&msyn-adj-gender) TARGET (Noun Masc Com Sg DefArt) OR (Adj Masc) IF (-1 (Noun Fem Com Sg)) ;
COPY:msyn-adj-gender (Fem Com Sg Len SUGGEST) EXCEPT (Masc Com Sg &msyn-adj-gender) TARGET (Masc &msyn-adj-gender);
ADDRELATION:msyn-adj-gender ($2) (Noun) FROM (1 Adj LINK 0 (&msyn-adj-gender));
        ## An fhuinneog beag - INCORRECT
	#$ An fhuinneog bheag - CORRECT

	#!! ## Prepositions

#!! **ADD:msyn-prep-pron** RULE TO CHANGE A PREPOSITION AND A PRONOUN INTO A PREPOSITIONAL PRONOUN (e.g., AG MÉ = AGAM, ROIMH SIBH = ROMHAIBH) !!IT WORKS!!

ADD:msyn-prep-pron (&msyn-prep-pron) TARGET (Prep Simp) (1 (Pron Pers)) ;
ADD:msyn-prep-pron (&msyn-prep-pron) TARGET (Pron Pers) (-1 &msyn-prep-pron) ;
ADDRELATION:msyn-prep-pron ($2 RIGHT) (&msyn-prep-pron) TO (1 (&msyn-prep-pron)) ;
SUBSTITUTE (Pron Pers &msyn-prep-pron) (Pron Pers co&msyn-prep-pron) TARGET (Pron Pers &msyn-prep-pron);
ADDRELATION:msyn-prep-pron (DELETE1) (Prep &msyn-prep-pron) TO (1 (Pron co&msyn-prep-pron)) ;

COPY:msyn-prep-pron (Pron Prep 1P Sg SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (1P Sg)) ;
COPY:msyn-prep-pron (Pron Prep 2P Sg SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (2P Sg)) ;
COPY:msyn-prep-pron (Pron Prep 3P Sg Masc SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (3P Sg Masc)) ;
COPY:msyn-prep-pron (Pron Prep 3P Sg Fem SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (3P Sg Fem)) ;
COPY:msyn-prep-pron (Pron Prep 1P Pl SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (1P Pl)) ;
COPY:msyn-prep-pron (Pron Prep 2P Pl SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (2P Pl)) ;
COPY:msyn-prep-pron (Pron Prep 3P Pl SUGGEST) EXCEPT (Prep Simp) TARGET (Prep &msyn-prep-pron) (1 (3P Pl)) ;
SUBSTITUTE (&msyn-prep-pron) (co&msyn-prep-pron) TARGET (SUGGEST &msyn-prep-pron) ;
MAP:LOCK_READING (SUGGEST) (SUGGEST);

	#$ Tá an madra ag siúl leat (correct)
	## Tá an madra ag siúl le tú (incorrect)
	#$ Tá súil aige leis (correct)
	## Tá súil aige le sé (incorrect)
	## Tá súil aige le sí (incorrect)
	#$ Tá súil aige léi (correct)

##  A RULE TO LENITE NOUNS FOLLOWING A POSSESSIVE ADJECTIVE (e.g., MO CHARR, DO THEACH, A MHADRA)

ADD:msyn-lenition-after-possessive-adjective (&msyn-lenition-after-possessive-adjective) TARGET (Noun Com) IF (-1 Det +  MODOA)(NOT 0 Len) ;
COPY:msyn-lenition-after-possessive-adjective (Len &SUGGEST) EXCEPT (&msyn-lenition-after-possessive-adjective) TARGET (&msyn-lenition-after-possessive-adjective) ;
ADDRELATION:msyn-lenition-after-possessive-adjective ($2) (Det) FROM (1 Noun LINK 0 (&msyn-adj-nom-acc)) ;

#!! **ADD:msyn-h-after-fem-possessive-adjective**: rule to add h to noun following possessor

ADD:msyn-h-after-fem-possessive-adjective (&msyn-h-after-fem-possessive-adjective) TARGET (Noun Com) IF (-1 Det + Poss + 3P + Sg + Fem)(NOT 0 Len) ;
COPY:msyn-h-after-fem-possessive-adjective (hPref &SUGGEST) EXCEPT (&msyn-h-after-fem-possessive-adjective) TARGET (&msyn-h-after-fem-possessive-adjective) ;
ADDRELATION:msyn-h-after-fem-possessive-adjective ($2) (Noun) FROM (-1 Det LINK 0 (&msyn-adj-nom-acc)) ;


#!! ### RULE TO ADD LENITION TO NOUNS FOLLOWING PREPOSITIONS
	
#!! **ADD:msyn-len-after-prep**: 

ADD:msyn-len-after-prep (&msyn-len-after-prep) TARGET (Noun Com Sg) OR (Subst Noun Sg) IF (-1 ART-LEN-PREP)(NEGATE 0 (Noun Fem Com Sg Len))(0 ("<[bcdfgmpstBCDFGMPST].*>"r)) ;
COPY:msyn-len-after-prep (Len SUGGEST) EXCEPT (&msyn-len-after-prep) TARGET (&msyn-len-after-prep) ;
ADDRELATION:msyn-len-after-prep ($2) (Prep) FROM (1 Noun LINK 0 (&msyn-len-after-prep)) ;
COPY:msyn-len-after-prep (Len SUGGEST) EXCEPT (Com &msyn-len-after-prep) BEFORE NUMBER TARGET (Noun &msyn-len-after-prep) ;


#!! ### RULE TO LENITE VERBS AFTER THE NEGATIVE PARTICLE NÍ

ADD:msyn-lenition-after-ni (&msyn-lenition-after-ni) TARGET (Verb PresInd) OR (Verb VTI Vow PresInd Len) OR (Verb VD PresInd Len) OR (Verb PresInd Auto) OR (Verb FutInd) OR (Verb FutInd Auto) OR (Verb Cond) OR (Verb PastImp) IF (-1 (Part Vb Neg"+NG") OR (Part Vb Neg))(0 ("<[bcdfgmpstBCDFGMPST].*>"r))(NEGATE 0 ("<[aeilnoru].*>"r))(NEGATE 0 Len);
COPY:msyn-lenition-after-ni (Len &SUGGEST) EXCEPT (&msyn-lenition-after-ni) TARGET (&msyn-lenition-after-ni) ;

## Ní ceannaíonn sí caifé gach lá. # incorrect
#$ Ní cheannaíonn sí caifé gach lá. # correct

#!! ### RULE TO LENITE VERBS IN THE PAST TENSE AFTER THE NEGATIVE PARTICLE NÍOR

ADD:msyn-lenition-after-nior (&msyn-lenition-after-nior) TARGET (Verb PastInd) IF (-1 (Part Vb Neg Past))(NEGATE 0 Len);
COPY:msyn-lenition-after-nior (Neg Len &SUGGEST) EXCEPT (&msyn-lenition-after-nior) TARGET (&msyn-lenition-after-nior) ; 


#!! **ADD:msyn-len-after-prep**: rule to add lenition to nouns following prepositions

#ADD:msyn-len-after-prep (&msyn-len-after-prep) TARGET ("an" Art Sg Def) IF (-1 ART-LEN-PREP + (Prep Cmpd))(1 (Noun Fem)) ;
#COPY:msyn-len-after-prep ("na" Gen Sg Def Fem SUGGEST) EXCEPT ("an" Sg Def &msyn-len-after-prep) TARGET (Art &msyn-len-after-prep) IF (1 (Noun Fem)) ;
	
	## Ar bhuile. - incorrect
	#$ Ar buile. - correct
	## Ar mheisce. - incorrect
	#$ Ar meisce. - correct
	## Thar bharr. - incorrect
	#$ Thar barr. - correct
	## ar fhud. - incorrect
	#$ ar fud. - correct.
	## ar fhud an tír. - incorrect
	#$ ar fud na tíre. - correct
	## ar fhud an Eoraip. - incorrect
	#$ ar fud na hEorpa. - correct
	## ar fhud an domhan. - incorrect
	#$ ar fud an domhain. - correct
	

#Caithfear a bheith airdeallach maidir leis na haidiachtaí taispeántacha ‘seo’ agus ‘sin’ a úsáid
#le réamhfhocail chomhshuite. Is é an tuiseal ginideach a leanann leithéidí ‘de bharr’, ‘de bhrí’, ‘in
#ainneoin’ agus ‘os coinne’ de ghnáth. Bíodh sin mar atá, ní féidir ‘seo’ agus ‘sin’ a infhilleadh. Botún
#atá ann a leithéid seo a scríobh: ‘de bharr sin’, ‘in ainneoin sin’ agus ‘os coinne sin’ Ina áit sin, ní mór
#an aidiacht shealbhach fhirinscneach sa tríú pearsa uatha a chur leo: ‘dá bharr sin’, ‘ina ainneoin sin’
#agus ‘os a choinne sin.’ Úsáidtear an aidiacht shealbhach sa tríú pearsa iolra chomh maith, de réir mar
#is cuí: ‘dá mbarr sin’, ‘ina n-ainneoin sin’ agus ‘os a gcoinne sin.’

##de bharr sin - #$dá bharr sin,
##in ainneoin sin - #$ina ainneoin sin,
##os coinne sin - #$os a choinne sin.
##in ainneoin - #$d'ainneoin.

##faoi: faoi bhord OIBRÍONN AN RIAIL
##de: de chapall OIBRÍONN AN RIAIL
##do: do Mháire OIBRÍONN AN RIAIL
##ó: ó Sheán OIBRÍONN AN RIAIL
##mar: mar dhuine 
##um: um thráthnóna
##trí: trí dhoras
##roimh: roimh mhaidin
##thar: thar fhalla (fisiciúil)
##eisceacht – thar fóir, thar barr (neamh-fhisiciúil)
##ar: ar chathaoir (fisiciúil)
##eisceacht – ar bord, ar maidin (neamh-fhisiciúil)
##i: i gCorcaigh, i dtigh
##ag: ag duine
##ar: ar baile
##chuig: chuig dochtúir
	## Chuig an Chomhairle. - incorrect
	#$ Chuig an gComhairle. - correct
##go: go Ciarraí
##le: le fear
##idir: idir Corcaigh agus Baile Átha Cliath
##‘h’ nuair a chiallaíonn idir ’both’ – idir fhir agus mhná
##gan: gan Seán
##‘h’ uaireanta – gan mhaith, gan mhoill
##go: go hálainn
##le: le háthas, le heagla

#!! ### rule to correct lenition (séimhiú) errors for nouns after certain prepositions

#ADD:msyn-len-after-prep (&msyn-len-after-prep) TARGET (Noun Com Sg) OR (Noun Com Sg DefArt) IF
        #(-1 ART-LEN-PREP + (Prep Simp))       			# one word to the left of the noun you TARGET is the word in LIST/SET ART-LEN-PREP and also has Prep and Simp tags
        #(0 ("<[bcdfgmpstBCDFGMPST].*>"r)); 			# the thing you TARGET itself if starting with the letters bcdfgp
        #(NEGATE 0 Ecl);
#COPY:msyn-len-after-prep (Len SUGGEST) EXCEPT (&msyn-len-after-prep) TARGET (&msyn-len-after-prep);
#ADDRELATION:msyn-len-after-prep ($2) (Prep) FROM (2 Noun LINK 0 (&msyn-len-after-prep));

# Model for Trond, smn:	 2673 ADDRELATION:msyn-adj-nom-acc ($2) () FROM (-1 A LINK 0 (&msyn-adj-nom-acc)) ;

## Tá bainisteoir nua ar an banc. # wrong
## Tá bainisteoir nua thar an banc. # wrong
## Tá bainisteoir nua ar an mbanc. # ok


#!! **ADD:msyn-ecl-after-prep**: A rule to correct eclipse errors without an intervening article. !!!IT WORKS!!!

ADD:msyn-ecl-after-prep (&msyn-ecl-after-prep) TARGET (Noun Com Sg) OR (Noun Com Sg DefArt) IF
        (-1 ECLIPSE-PREP + (Prep Simp))
        (0 ("<[bcdfgpstBCDFGPST].*>"r))
        (NEGATE 0 Ecl);
COPY:msyn-ecl-after-prep (Ecl SUGGEST) EXCEPT (&msyn-ecl-after-prep) OR (DefArt &msyn-ecl-after-prep) TARGET (&msyn-ecl-after-prep);


#!! **ADD:msyn-ecl-after-prep-sfem**: Eclipse after preposition ... (sfem?)

#ADD:msyn-ecl-after-prep-sfem (&msyn-ecl-after-prep-sfem) TARGET (Noun Fem Com Sg) IF
        #(-2 ART-LEN-PREP + (Prep Simp)) 			# two words to the left of the thing you TARGET is the word in LIST/SET ART-LEN-PREP and also has Prep and Simp tags
        #(-1 Art) 						# One to the left of the thing you TARGET is Art
        #(0 ("st.*"r) OR ("sr.*"r) OR ("se.*"r) OR ("sa.*"r) )
        #(NOT 0 Ecl OR ECL-NON-ECL-N)  				# The thing you target is NOT Ecl OR a word in the LIST/SET ECL-NON-ECL-N
        #(0 ("<[bcfgpsBCFGPS].*>"r)) 				# the thing you TARGET itself if starting with the letters bcfgps
        #(NEGATE 0 ("<[s].*>"r) + Masc) ; 			# The rule dosn't target a masculine word starting with the letter S.

#COPY:msyn-ecl-after-prep-sfem (DefArt SUGGEST) EXCEPT (&msyn-ecl-after-prep-sfem) OR (Ecl &msyn-ecl-after-prep-sfem) TARGET (&msyn-ecl-after-prep-sfem);

#!! ### Rules for lenition

#        (NEGATE 0 ("<[s].*>"r) + Masc)
#        (NEGATE 0 ("<st.*>"r) + Fem)
#        (NEGATE 0 ("<se.*>"r) + Fem)
#        (NEGATE 0 ("<si.*>"r) + Fem)   
#        (NEGATE 0 ("<sr.*>"r) + Fem) 

	## Tá an dochtúir ag seasamh ag an fuinneog mhór.
    	#$ Tá an dochtúir ag seasamh ag an bhfuinneog mhór.
    
    	
ADD:msyn-ecl-after-prep2 (&msyn-ecl-after-prep2) TARGET (Noun Com Sg) IF
	(-1 ECLIPSE-PREP + (Prep Simp))
	(NOT 0 Ecl OR ECL-NON-ECL-N) ;
COPY:msyn-ecl-after-prep2 (Ecl SUGGEST) EXCEPT (&msyn-ecl-after-prep2) TARGET (&msyn-ecl-after-prep2);
#ADDRELATION:msyn-ecl-after-prep2 ($2) ECLIPSE-PREP FROM (*1 Noun LINK 0 &msyn-ecl-after-prep2);


# Valency errors
# "teastaigh" V + "ó"	

#!! **ADD:msyn-teastaigh-ó**: exchange prep "mé" with "ó" when following "teastaigh"

ADD:msyn-teastaigh-ó (&msyn-teastaigh-ó) TARGET (Pron Pers) IF (NOT 0 ("ó" Prep))(*-1 ("teastaigh") BARRIER (*) - (Noun Com)) ;
COPY:msyn-teastaigh-ó ("ó" Prep SUGGEST) EXCEPT ("mé" Pers &msyn-teastaigh-ó) OR ("tú" Pers &msyn-teastaigh-ó) OR ("é" Pers &msyn-teastaigh-ó) OR ("í" Pers &msyn-teastaigh-ó) OR ("sinn" Pers &msyn-teastaigh-ó) OR ("muid" Pers &msyn-teastaigh-ó) OR ("sibh" Pers &msyn-teastaigh-ó) OR ("siad" Pers &msyn-teastaigh-ó) AFTER Pron TARGET (&msyn-teastaigh-ó) ;

	## Teastaíonn mé. - incorrect - Pron Pers
	#$ Teastaíonn uaim. - correct - Pron + Prep
	#$ Teastaíonn mála uaim.
	## Teastaíonn mála mé.
	
#!! **ADD:msyn-inis-do** ...
	
#ADD:msyn-inis-do (&msyn-inis-do) TARGET (Prep Prep Rel) IF (NOT 0 ("do" Prep))(*-1 ("inis") BARRIER (*) - (Noun Com)) ;
#COPY:msyn-inis-do ("do" Prep SUGGEST) EXCEPT ("mé" Pers &msyn-inis-do) OR ("tú" Pers &msyn-inis-do) OR ("é" Pers &msyn-inis-do) OR ("í" Pers &msyn-inis-do) OR ("sinn" Pers &msyn-inis-do) OR ("muid" Pers &msyn-inis-do) OR ("sibh" Pers &msyn-inis-do) OR ("siad" Pers &msyn-inis-do) AFTER Pron TARGET (&msyn-inis-do) ;


#ADD:msyn-ar-an-aonach (&msyn-ar-an-aonach) TARGET ("ag" Prep) IF (NOT 0 ("ar" Prep))(*-1 ("an aonach") BARRIER (*) - (Noun Com)) ;
#COPY:msyn-ar-an-aonach ("ar" SUGGEST) EXCEPT ("ag" &msyn-ar-an-aonach) TARGET (&msyn-ar-an-aonach);	
	## Ag an aonach. - incorrect ("ag" at)
	#$ Ar an aonach. - correct ("ar" on)

#!! **ADD:msyn-ar-an-aonach**: A rule to correct the error "ag an aonach" to the correct form "ar an aonach".	

ADD:msyn-ar-an-aonach (&msyn-ar-an-aonach) TARGET ("ag" Prep Simp) IF (*2 ("aonach")) ;
COPY:msyn-ar-an-aonach ("ar" Prep Simp SUGGEST) EXCEPT ("ag" Prep Simp) TARGET (&msyn-ar-an-aonach) ;
######ADDCOHORT:msyn-ar-an-aonach ("<an>" "an" ADDED-BEFORE-BLANK &msyn-ar-an-aonach) AFTER &msyn-ar-an-aonach (NEGATE 0 ADDED); ####THIS CAUSES CHAOS AND STOPS THE TERMINAL!!!###
ADDRELATION:msyn-ar-an-aonach ($2 RIGHT) (V &msyn-ar-an-aonach) TO (1 (ADDED-BEFORE-BLANK)) ;

#!! **ADD:msyn-ar-a-haon-a-chlog** ...

#ADD:msyn-ar-a-haon-a-chlog (&msyn-ar-a-haon-a-chlog) TARGET ("ag" Prep) IF (NOT 0 ("ar" Prep))(*-1 ("a haon a chlog") BARRIER (*) - (Noun Com)) ;
#COPY:msynar-a-haon-a-chlog ("ar" SUGGEST) EXCEPT ("ag" &msynar-a-haon-a-chlog) TARGET (&msynar-a-haon-a-chlog);	
	## Ag a haon a chlog. - incorrect ("ag" at)
	#$ Ar a haon a chlog. - correct ("ar" on)

LIST SCALE-WORDS = "buí" ;

SET NOT-SCALE-WORDS = WORD - SCALE-WORDS ;

# "fada" A + "ó"


#!! **ADD:msyn-fada-ó** ...
ADD:msyn-fada-ó (&msyn-fada-ó) TARGET (Pron Pers) IF (NOT 0 ("ó" Prep))(*-1 ("fada" Adj) BARRIER NOT-SCALE-WORDS LINK *-1 ("is")) ;
COPY:msyn-fada-ó ("ó" Prep SUGGEST) EXCEPT ("mé" Pers &msyn-teastaigh-ó) OR ("tú" Pers &msyn-teastaigh-ó) OR ("é" Pers &msyn-teastaigh-ó) OR ("í" Pers &msyn-teastaigh-ó) OR ("sinn" Pers &msyn-teastaigh-ó) OR ("sibh" Pers &msyn-teastaigh-ó) OR ("siad" Pers Sbj &msyn-teastaigh-ó) AFTER Pron TARGET (&msyn-fada-ó) IF (NEGATE 1 (Verb PastInd));

	## Is fada buí mé. - incorrect
	#$ Is fada buí uaim. - correct 
	## Is fada buí é.
	## Is fada buí iad.

#!! **ADD:msyn-beag-is-fiú-de** "beag is fiú de" A + "de"	
#ADD:msyn-beag-is-fiú-de (&msyn-beag-is-fiú-de) TARGET (Pron Pers) IF (NOT 0 ("de" Prep))(*-1 ("beag is fiú de" Adj) BARRIER (*) - SCALE-WORDS LINK *-1 ("is")) ;
#COPY:msyn-beag-is-fiú-de ("de" Prep SUGGEST) EXCEPT ("dom" Pers &msyn-teastaigh-ó) OR ("duit" Pers &msyn-teastaigh-ó) OR ("dó" Pers &msyn-teastaigh-ó) OR ("di" Pers &msyn-teastaigh-ó) OR ("dúinn" Pers &msyn-teastaigh-ó) OR ("daoibh" Pers &msyn-teastaigh-ó) OR ("dóibh" Pers Sbj &msyn-beag-is-fiú-de) AFTER Pron TARGET (&msyn-beag-is-fiú-de) IF (NEGATE 1 (Verb PastInd));	
	## Ná déan beag is fiú dom. - incorrect
	#$ Ná déan beag is fiú díom. - correct
	
#COPY:msyn-fada-ó ("ó" Prep Simp SUGGEST) EXCEPT ("mé" Pron Pers 1P Sg &msyn-teastaigh-ó) OR ("tú" Pers Pers 2P Sg &msyn-teastaigh-ó) OR ("é" Pers Pers 3P Sg Masc &msyn-teastaigh-ó) OR ("í" Pers Pers 1P Sg Fem &msyn-teastaigh-ó) OR ("sinn" Pers Pers 1P Pl &msyn-teastaigh-ó) OR ("sibh" Pers Pers 2P Pl &msyn-teastaigh-ó) OR ("siad" Pron Pers 3P Pl Sbj &msyn-teastaigh-ó) TARGET (&msyn-fada-ó) IF (1 (Verb PastInd));
	## Is fada mé bhí mise i mo mhac léinn.
	#$ Is fada ó bhí mise i mo mhac léinn.

#!! **ADD:msyn-cúpla-plnoun-sgnoun** ..

#!! ### RULE TO CORRECT PLURAL NOUNS AFTER THE WORD CÚPLA AS THE NOUN AFTER CÚPLA SHOULD BE IN THE SINGULAR FORM. !!IT WORKS!!

ADD:msyn-cúpla-plnoun-sgnoun (&msyn-cúpla-plnoun-sgnoun) TARGET (Noun Com Pl) IF (-1 ("cúpla" Det Qty)) ;
COPY:msyn-cúpla-plnoun-sgnoun (Sg SUGGEST) EXCEPT (Pl &msyn-cúpla-plnoun-sgnoun) TARGET (&msyn-cúpla-plnoun-sgnoun);
	
	## Cúpla laethanta. - incorrect
	#$ Cúpla lá. - correct 
	## Cúpla focail. - incorrect
	#$ Cúpla focal. - correct
	
	# nouns in genitive after compound prepositions
	
	
ADD:msyn-com-case-nouns (&msyn-com-case-nouns) TARGET (Noun Gen) IF (-1 ("an" Art Sg Def));
COPY:msyn-com-case-nouns (Com Sg DefArt SUGGEST) EXCEPT (Gen Sg DefArt &msyn-com-case-nouns) TARGET (&msyn-com-case-nouns);
	
	
#!! ### RULE TO ENSURE THAT NOUNS APPEAR IN THE GENITIVE CASE. !!IT WORKS!! 

#!! #### Noun + Noun => Noun + Noun.Gen

ADD:msyn-gen-noun-noun (&msyn-gen-noun-noun) TARGET (Noun Com) IF (*-1 (Prep Cmpd) BARRIER (*) - Art)(NEGATE 0 (Gen Sg))(NEGATE 0 WORD-BEGIN-NO-LEN - Fem LINK -1 WORD-END-NO-LEN);

# backup of following 3 rules:
#ADD:msyn-gen-noun-noun (&msyn-gen-noun-noun) TARGET (Noun Com) OR (Noun Gen Weak Pl) - Ecl - DefArt OR (Noun Masc Gen Sg hPref) IF
#	(*-1 (Noun Com) OR (Verbal Noun VTI) BARRIER (*) - Art OR (Prep Art) LINK NEGATE -1 (Art Sg Def))
#	(NEGATE 0 (Gen Sg))
#	(NEGATE 0 Prop LINK *-1 (Art Def) BARRIER (*) - Noun - Adj)
#	(NEGATE -2 (Verb VTI));

# teach scoil > teach scoile 
ADD:msyn-gen-noun-noun (&msyn-gen-noun-noun) TARGET (Noun Com) IF
	(-1 (Noun Com))
	(NEGATE 0 (Gen Sg))
#	(NEGATE 0 Prop LINK *-1 (Art Def) BARRIER (*) - Noun - Adj) 
	(NEGATE -2 (Verb VTI)); # VSO buys girl flower, opens man shop
COPY:msyn-gen-noun-noun (Gen Sg SUGGEST) EXCEPT (Com &msyn-gen-noun-noun) TARGET (&msyn-gen-noun-noun) ;

ADD:msyn-gen-noun-defart-noun (&msyn-gen-noun-defart-noun) TARGET (Noun Com Sg DefArt) IF
	(-2 (Noun Com))
	(-1 (Art Def))
	(NEGATE 0 (Gen Sg))
	(NEGATE -3 (Verb VTI)); # VSO buys the girl the flower
COPY:msyn-gen-noun-defart-noun (Gen Sg DefArt SUGGEST) EXCEPT (Com Sg DefArt &msyn-gen-noun-defart-noun) TARGET (&msyn-gen-noun-defart-noun) ;;

ADD:msyn-gen-noun-defart-noun (&msyn-gen-noun-defart-noun) TARGET (Noun Com) IF
	(-2 (Noun Com))
	(-1 (Art Def))
	(NEGATE 0 (Gen Sg))
	(NEGATE -3 (Verb VTI)); # VSO buys the girl the flower
COPY:msyn-gen-noun-defart-noun (Gen Pl SUGGEST) EXCEPT (Com Pl &msyn-gen-noun-defart-noun) TARGET (&msyn-gen-noun-defart-noun) ;;

ADD:msyn-gen-vn-noun (&msyn-gen-vn-noun) TARGET (Noun Com) IF
	(*-1 (Verbal Noun VTI) BARRIER (*) - Art OR (Prep Art) LINK NEGATE -1 (Art Sg Def))
	(NEGATE 0 (Gen Sg))
	(NEGATE 0 Prop LINK *-1 (Art Def) BARRIER (*) - Noun - Adj)
	(NEGATE -2 (Verb VTI));

ADD:msyn-gen-noun-noun (&msyn-gen-noun-noun) TARGET (Noun Gen Weak Pl) - Ecl - DefArt IF
	(*-1 (Noun Com) BARRIER (*) - Art OR (Prep Art) LINK NEGATE -1 (Art Sg Def))
	(NEGATE 0 (Gen Sg))
	(NEGATE 0 Prop LINK *-1 (Art Def) BARRIER (*) - Noun - Adj)
	(NEGATE -2 (Verb VTI));
COPY:msyn-gen-noun-noun (Sg  SUGGEST) EXCEPT (Weak Pl  &msyn-gen-noun-noun) AFTER Masc TARGET (Masc Gen Weak0. Pl);

ADD:msyn-gen-vn-noun (&msyn-gen-vn-noun) TARGET (Noun Masc Gen Sg hPref) IF
	(*-1 (Verbal Noun VTI) BARRIER (*) - Art OR (Prep Art) LINK NEGATE -1 (Art Sg Def))
	(NEGATE 0 (Gen Sg))
	(NEGATE 0 Prop LINK *-1 (Art Def) BARRIER (*) - Noun - Adj)
	(NEGATE -2 (Verb VTI));

#(NEGATE -1 Noun LINK NOT 2 Noun LINK *-1 VTI OR VD);    	###WHEN THIS LINE IS OPERATING, IT BREAKS THE RULE FOR COMBINATIONS SUCH AS CEADÚNAS TIOMÁINT, CEADÚNAS IASCAIREACHT, ETC.!!!!
#(NEGATE 0 WORD-BEGIN-NO-LEN LINK -1 WORD-END-NO-LEN);
	#$ An múinteoir Ben
	#$ Thug an rialtas airgead dó.

COPY:msyngen-noun-defart-noun (Gen Sg DefArt SUGGEST) EXCEPT (Com Sg &msyngen-noun-defart-noun) TARGET (Com Sg &msyngen-noun-defart-noun) IF (-1 (Art Def))(NEGATE 0 DefArt);

COPY:msyn-gen-noun-defart-noun (Gen Weak Pl DefArt SUGGEST) EXCEPT (Gen Sg hPref &msyn-gen-noun-defart-noun) AFTER Masc TARGET (Masc Gen Sg hPref &msyn-gen-noun-defart-noun)(NEGATE 0 DefArt);
	## Chuaigh na saighdiúirí isteach i mbialann na hoifigigh.
        #$ Chuaigh na saighdiúirí isteach i mbialann na n-oifigeach.

	# definite	
#tr COPY:msyn-gen-case-nouns (Gen Sg SUGGEST) EXCEPT (Com Sg &msyn-gen-case-nouns) BEFORE DefArt TARGET (DefArt Sg &msyn-gen-case-nouns)(NEGATE -1 (Art Def));
	## Parlaimint an Eoraip. (erroneous)
	#$ Parlaimint na hEorpa. (correct)
	
	# indefinite
COPY:msyn-gen-case-nouns (Gen Sg SUGGEST) EXCEPT (Com Sg &msyn-gen-case-nouns) TARGET (Sg &msyn-gen-case-nouns) - DefArt (NEGATE -1 (Art Def));
	## bosca bruscar.
	#$ bosca bruscair.
	#$ ceadúnas tiomána.

COPY:msyn-gen-case-nouns (Gen Sg SUGGEST) EXCEPT (Com Sg &msyn-gen-case-nouns) BEFORE DefArt TARGET (Sg &msyn-gen-case-nouns)(0 DefArt - SUGGEST)(-1 (Art Def));
	
	## Uachtarán an ollscoil. (incorrect)
	#$ Uachtarán na hollscoile. (correct)
	## Ta an dochtuir ag seasamh le hais an fuinneog. - incorrect
	#$ Tá an dochtúir ag seasamh le hais na fuinneoige. - correct
	
COPY:msyn-gen-case-nouns (Gen Weak Pl DefArt SUGGEST) EXCEPT (Gen Weak Pl &msyn-gen-case-nouns) TARGET (Pl &msyn-gen-case-nouns) IF (-1 (Art Def))(NEGATE 0 DefArt);
COPY:msyn-gen-case-nouns (Gen Weak Pl SUGGEST) EXCEPT (Gen Weak Pl &msyn-gen-case-nouns) BEFORE DefArt TARGET (Pl &msyn-gen-case-nouns)(NEGATE -1 (Art Def));
COPY:msyn-gen-case-nouns (Gen Weak Pl SUGGEST) EXCEPT (Gen Weak Pl &msyn-gen-case-nouns) BEFORE DefArt TARGET (Pl &msyn-gen-case-nouns)(0 DefArt - SUGGEST)(-1 (Art Def));
	## Cumann na Fear.
	#$ Cumann na bhFear.


#!! #### Art + Noun.Gen => Art.Gen + Noun.Gen # here we correct 

# (forthcoming)

#!! **ADD:msyn-gen-case-nouns** ...
ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET ("an" Art Sg Def) IF (NEGATE 0 Gen)(1 (Noun &msyn-gen-case-nouns));
COPY:msyn-gen-case-nouns ("na" Gen Sg Def Fem SUGGEST) EXCEPT ("an" Sg Def &msyn-gen-case-nouns) TARGET (Art &msyn-gen-case-nouns) IF (1 (Noun Fem));
COPY:msyn-gen-case-nouns ("na" Gen Sg Def Masc SUGGEST) EXCEPT ("an" Sg Def &msyn-gen-case-nouns) TARGET (Art &msyn-gen-case-nouns) IF (1 (Noun Masc));
COPY:msyn-gen-case-nouns ("na" Gen Sg Def Masc SUGGEST) EXCEPT ("an" Sg Def &msyn-gen-case-nouns) TARGET (Art &msyn-gen-case-nouns) IF (1 (Noun Masc));
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Art &msyn-gen-case-nouns));
SUBSTITUTE (&msyn-gen-case-nouns) (co&msyn-gen-case-nouns) TARGET (SUGGEST);
#Trond MAP:LOCK_READING (SUGGEST) (SUGGEST);


# --- This is jacket of.the boy tall > this is jacket of.the boy.gen tall.genFem+Gen+Sg
ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET (Adj Masc Com Sg) IF (NEGATE 0 Gen)(-1 (Noun &msyn-gen-case-nouns) OR (Adj));
COPY:msyn-gen-case-nouns (Gen Sg Len SUGGEST) EXCEPT (Com Sg Len &msyn-gen-case-nouns) TARGET (Adj &msyn-gen-case-nouns);
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Noun &msyn-gen-case-nouns) OR (Adj));

# --- This is jacket of.the girl tall > this is  jacket of.the girl.gen tall.genFem+Gen+Sg
ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET (Adj Fem Com Sg) IF (NEGATE 0 Gen)(NEGATE 0 Len)(-1 (Noun &msyn-gen-case-nouns));
COPY:msyn-gen-case-nouns (Gen Sg SUGGEST) EXCEPT (Com Sg &msyn-gen-case-nouns) TARGET (Adj &msyn-gen-case-nouns);
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Noun &msyn-gen-case-nouns));

# --- # "this is the " This is jacket of.the girl tall > this is  jacket of.the girl.gen tall.genFem+Gen+Sg
ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET (Adj Fem Com Sg Len) IF (NEGATE 0 Gen)(-1 (Noun &msyn-gen-case-nouns));
COPY:msyn-gen-case-nouns (Gen Sg SUGGEST) EXCEPT (Com Sg Len &msyn-gen-case-nouns) TARGET (Adj &msyn-gen-case-nouns);
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Noun &msyn-gen-case-nouns));


ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET (Adj Base) IF (NEGATE 0 Gen)(-1 (Noun Masc Sg &msyn-gen-case-nouns));
COPY:msyn-gen-case-nouns (Len SUGGEST) EXCEPT (&msyn-gen-case-nouns) TARGET (Adj Base &msyn-gen-case-nouns);
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Noun &msyn-gen-case-nouns));



# --- # ... and the same in plural
ADD:msyn-gen-case-nouns (&msyn-gen-case-nouns) TARGET (Adj Com Pl) IF (NEGATE 0 Gen)(-1 (Noun &msyn-gen-case-nouns));
COPY:msyn-gen-case-nouns (Gen Pl Len SUGGEST) EXCEPT (Com Pl Len &msyn-gen-case-nouns) TARGET (Adj &msyn-gen-case-nouns);
ADDRELATION ($2 LEFT) (&msyn-gen-case-nouns) TO (-1 (Noun &msyn-gen-case-nouns));

# --

ADD:msyn-fem-article (&msyn-fem-article) TARGET ("an" Art Sg Def) IF (0 ("na" Art Def Fem))(*1 (Noun Com))(-1 (Noun Com));
COPY:msyn-fem-article (Art Gen Sg Def Fem SUGGEST) EXCEPT (Art Sg Def) TARGET (&msyn-fem-article) ;
ADDRELATION:msyn-fem-article ($2) (Noun) FROM (1 ("an" Art Sg Def) LINK 0 (&msyn-fem-article));
# Todo Trond: Fix this rule. The error msg asks for genitive, but the rule for comitative.

#!! ## Definiteness errors in nouns

#!! ### RULE TO CORRECT THE GENDER OF NOUNS IF THEY ARE DEFINITE FEMININE NOUNS. !!IT WORKS!!

ADD:msyn-noun-defart (&msyn-noun-defart) TARGET (Noun Sg) IF
	(-1 ("an" Art Sg Def))
	(-2 (*) - ECLIPSE-PREP)
	(NEGATE 0 DefArt OR &msyn-gen-noun-defart-noun)
	(NEGATE 0 WORD-BEGIN-NO-LEN LINK -1 WORD-END-NO-LEN) ;
COPY:msyn-noun-defart (DefArt SUGGEST) EXCEPT (&msyn-noun-defart) OR (Len &msyn-noun-defart) TARGET (&msyn-noun-defart);
ADDRELATION:msyn-noun-defart ($2) Art + Def FROM (1 Noun LINK 0 &msyn-noun-defart);


	## An bean. - incorrect
	#$ An bhean. - correct

#!! ### A RULE TO CHANGE THE NOUN AFTER A NOUN AND A POSSESIVE ADJECTIVE TO THE GENITIVE CASE. !!IT WORKS!!
# Note: Rule says target is Noun.Com + Det.Poss + Noun.Com, and changes the final noun. Where is the adjective?
ADD:msyn-possadj-nom-gen (&msyn-possadj-nom-gen) TARGET (Noun Com) IF (-1 (Det Poss) LINK NOT 0 &msyn-prep-pron)(-2 (Noun Com));
COPY:msyn-possadj-nom-gen (Gen Sg Len SUGGEST) EXCEPT (Com Sg &msyn-possadj-nom-gen) OR (Com Sg Len &msyn-possadj-nom-gen) TARGET (&msyn-possadj-nom-gen);
ADDRELATION:msyn-possadj-nom-gen ($2) Noun + Com FROM (2 Noun LINK 0 &msyn-possadj-nom-gen);

	## carr a athair - incorrect
	#$ carr a athar - correct
	## eagla a chraiceann - incorrect
	#$ eagla a chraicinn - correct
	## doras mo theach - incorrect
	#$ doras mo thí - correct
	
# Speller suggestions rule – add SUGGESTWF to any spelling suggestion
# that we actually want to suggest to the user.
# The simplest is to just add it to all spelled words:
ADD:spell-it-all (&typo SUGGESTWF) (<spelled>) ;
# But perhaps you want to only suggest spellings of words that are not inside "quotes":
ADD:spell-conservatively (&typo SUGGESTWF) (<spelled>) IF (NEGATE -1 QMARK LINK 2 QMARK);

#!! ### A simple grammar checker rule without suggestions: Ensure preceding nominal agrees with the verb

ADD:err-agr (&err-agr) TARGET V IF (-1C Sg + Nom) (0 V) (NOT 0 Sg3);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Sg1 + Nom) (0 V) (NOT 0 Sg1);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Sg2 + Nom) (0 V) (NOT 0 Sg2);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Pl1 + Nom) (0 V) (NOT 0 Pl1);
ADD:err-agr (&err-agr) TARGET V IF (-1C Pron + Pl2 + Nom) (0 V) (NOT 0 Pl2);

# And one with a suggestion where we simply change the tag Sg into Attr:

ADD:attr-not-pred (&attr-not-pred) TARGET (A Sg) IF (NOT 0 Attr OR Gen) (1 CC LINK *1 COMMON-N) ;
COPY:attr-not-pred (Attr SUGGEST) EXCEPT (Sg) TARGET (&attr-not-pred) ;

# The method is: Add SUGGEST to a copied reading to *generate* a suggestion form from that reading. The copy should contain the error tag too – &-prefixed error tags are ignored when generating, but used to create human-readable messages.

#!! **ADD:use-guillemets**: Simple punctuation rules showing how to change the lemma in the suggestions:

ADD:use-guillemets (&guillemets) TARGET ("""); #"
COPY:left-guillemet ("«" SUGGEST) EXCEPT (""") TARGET (&guillemets) ;
COPY:right-guillemet ("»" SUGGEST) EXCEPT (""") TARGET (&guillemets) ;

#!! **ADD:use-ellipsis** ...

ADD:use-ellipsis (&ellipsis) TARGET ("...");
COPY:use-ellipsis ("…" SUGGEST) EXCEPT ("...") TARGET (&ellipsis) ;

#!! **ADD:msyn-ar-an-tae**: This rule is for when people put milk in tea. In Irish, the correct way to say it is that milk is put on tea.
	#$Bainne a chur ar an tae.
	#$Bainne a chur ar do chuid tae.
	##Bainne a chur sa tae.


ADD:msyn-ar-an-tae (&msyn-ar-an-tae) TARGET ("i" Prep Art Sg) IF (1 ("tae")) ;
COPY:msyn-ar-an-tae ("ar" Prep Simp SUGGEST) EXCEPT ("i" Prep Art Sg) TARGET (&msyn-ar-an-tae) ;
#ADDCOHORT:msyn-ar-an-tae ("<an>" "an" ADDED-BEFORE-BLANK &msyn-ar-an-tae) AFTER &msyn-ar-an-tae (NEGATE 0 ADDED);
ADDRELATION:msyn-ar-an-tae ($2 RIGHT) (V &msyn-ar-an-tae) TO (1 (ADDED-BEFORE-BLANK)) ;


#!! This rule is for when people put milk in coffee. In Irish, the correct way to say it is that milk is put on coffee. At is stands, the rule works for Ulaidh Irish. It needs to be changed to work for standard Irish.

	#$Bainne a chur ar an gcaife.
	#$Cuir bainne ar an gcaife.
	#$Bainne a chur ar do chaife.
	##Bainne a chur sa chaife.

#!! **ADD:msyn-ar-an-gcaife** ...

#ADD:msyn-ar-an-gcaife (&msyn-ar-an-gcaife) TARGET ("i" Prep Art Sg) IF (1 ("caife" Noun Masc Gen Sg DefArt)) ;
#OPY:msyn-ar-an-gcaife ("ar" Prep Simp SUGGEST) EXCEPT ("i" Prep Art Sg) TARGET (&msyn-ar-an-gcaife) ;
#ADDCOHORT:msyn-ar-an-gcaife ("<an>" "an" ADDED-BEFORE-BLANK &msyn-ar-an-gcaife) AFTER &msyn-ar-an-gcaife (NEGATE 0 ADDED);
#ADDRELATION:msyn-ar-an-gcaife ($2 RIGHT) (V &msyn-ar-an-gcaife) TO (1 (ADDED-BEFORE-BLANK)) ;
#ADD:msyn-ecl-after-prep (&msyn-ecl-after-prep) TARGET (Noun Com Sg) IF
	#(-1 Art)
	#(-2 ECLIPSE-PREP + Prep + Simp)
	#(NOT 0 Ecl OR ECL-NON-ECL-N) ;
#COPY:msyn-ecl-after-prep (Ecl SUGGEST) EXCEPT (&msyn-ecl-after-prep) OR (DefArt &msyn-ecl-after-prep) TARGET (&msyn-ecl-after-prep);
#ADDRELATION:msyn-ecl-after-prep ($2) ECLIPSE-PREP FROM (*1 Noun LINK 0 &msyn-ecl-after-prep);

#!! **ADD:msyn-ie.i.** ...
#ADD:msyn-ie.i. (&msyn-&.i.) TARGET ("i.e." i.e.+Abr) ;
#COPY:msyn-ie.i. (".i." SUGGEST) TARGET (msyn-ie.i.) ;

LIST <fixedcase> = <fixedcase>;

ADD <fixedcase> TARGET ("<Eoraip>") ;

	# syntax rules (word order, insertion, etc.)
	
#!! ###  A RULE TO INSERT THE PARTICLE A BEFORE A VERB RELATIVE PHRASE !!IT WORKS!!

ADD:syn-a-before-verb-relativephrase (&syn-a-before-verb-relativephrase) TARGET (Verb Len) IF (-1 Noun OR Dem) ;
ADDCOHORT  ("<a>" "a" Det Poss 3P Sg Fem ADDED-BEFORE-BLANK &syn-a-before-verb-relativephrase) BEFORE &syn-a-before-verb-relativephrase (NEGATE 0 ADDED);
ADDRELATION ($2 RIGHT) (V &syn-a-before-verb-relativephrase) TO (-1 ADDED) ;

	## An méid {dhéanann}¥{missing|a dhéanann} an tÚdarás
	## An ceol sheinneann sé gach lá agus é i mbun oibre.
	## An obair {rinne} an bainisteoir.
	## Sin an cleas céanna d'imir sé orm.
	## Tá sé ar intinn aici é sin {dhéanamh}.
	## Sin an obair {chríochnófar} amárach
